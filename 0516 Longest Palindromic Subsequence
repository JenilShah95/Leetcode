""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:

"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".
Example 2:
Input:

"cbbd"
Output:
2

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


class Solution {
    public int longestPalindromeSubseq(String s) {
        int n=s.length();
        int[] dp = new int[n];
        for(int i=0;i<n;i++){
            dp[i]=1;
        }
        for(int i=0;i<n;i++){
            int cur=0;
            for(int j=i-1;j>=0;j--){
                int temp=dp[j];
                if(s.charAt(i)==s.charAt(j)){
                    dp[j]=cur+2;
                }
                cur=Math.max(cur,temp);
            }
        }
        int max=0;
        for(int i : dp){
            if(i>max){
                max=i;
            }
        }
        return max;
    }
}
