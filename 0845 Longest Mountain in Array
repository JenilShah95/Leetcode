"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Let's call any (contiguous) subarray B (of A) a mountain if the following properties hold:

B.length >= 3
There exists some 0 < i < B.length - 1 such that B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1]
(Note that B could be any subarray of A, including the entire array A.)

Given an array A of integers, return the length of the longest mountain. 

Return 0 if there is no mountain.

Example 1:

Input: [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
Example 2:

Input: [2,2,2]
Output: 0
Explanation: There is no mountain.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
####OPTIMAL SOLUTION####
class Solution {
    public int longestMountain(int[] A) {
        if(A.length<3){
            return 0; 
        }
        
        int up=0;
        int down =0;
        
        int count = 0;
        for(int i=0;i<A.length-1;i++){
            while(i<A.length-1 && A[i] < A[i+1]){
                up++;
                i++;
            }
            while(i<A.length-1 && A[i] > A[i+1]){
                down++;
                i++;
            }
            if(up!=0 && down!=0){
                count = Math.max(count,up+down+1);
            }
            if(up!=0 || down!=0){
                i--;
                up=0;
                down=0;
                
            }
        }
        return count;
    }
}



####MY# SOLUTION####
class Solution {
    public int longestMountain(int[] A) {
        if(A.length<3){
            return 0; 
        }
        int countmax = 0;
        for(int i=1;i<A.length-1;i++){
            int a=i;
            int count=0;
            int j=i-1,k=i+1;
            while(j>=0){
                if(A[j]<A[a]){
                    count++;
                }
                else{
                    break;
                }
                j--;
                a--;
            }
            a=i;
            if(count==0){
                continue;
            }
            int countA=count;
            while(k<A.length){
                if(A[k]<A[a]){
                    count++;
                }
                else{
                    break;
                }
                k++;
                a++;
            }
            if(count==countA){
                continue;
            }
            countmax=Math.max(countmax,count+1);
        }
        return countmax;
    }
}


