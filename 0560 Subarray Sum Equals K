""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


class Solution {
    public int subarraySum(int[] nums, int k) {
        int count=0;
        for(int i=0;i<nums.length;i++){
            int total=0;
            for(int j = i; j < nums.length; j++){
                total+=nums[j];
                if(total==k){
                    count++;
                }            
            }
        }
        return count;
    }
}


// class Solution {
//     public int subarraySum(int[] nums, int k) {
//         int count=0;
//         int total=0;
//         HashMap<Integer,Integer> sum = new HashMap<>();
//         sum.put(0,1);
//         for(int i=0;i<nums.length;i++){
//             total+=nums[i];
//             if(sum.containsKey(total - k)){
//                 count+=sum.get(total-k);
//             }
//             if(!sum.containsKey(total)){
//                 sum.put(total,0);
//             }
//             sum.put(total,sum.get(total)+1);
//         }
//         return count;
//     }
// }
