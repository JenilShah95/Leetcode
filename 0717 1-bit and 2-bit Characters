"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

We have two special characters. The first character can be represented by one bit 0. 
The second character can be represented by two bits (10 or 11).

Now given a string represented by several bits. Return whether the last character must be a one-bit character or not.
The given string will always end with a zero.

Example 1:
Input: 
bits = [1, 0, 0]
Output: True
Explanation: 
The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.
Example 2:
Input: 
bits = [1, 1, 1, 0]
Output: False
Explanation: 
The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


// class Solution {
//     public boolean isOneBitCharacter(int[] bits) {
//         int start=0,end=bits.length;
//         while(start<end){
//             if(bits[start]==0 && start == end-1){
//                 return true;
//             }
//             if(bits[start]==1){
//                 if(start<=end-2){
//                     start++;    
//                 }
//                 else{
//                     return false;
//                 }
                
//             }
//             start++;
//         }
//         return false;
//     }
// }


class Solution {
    public boolean isOneBitCharacter(int[] bits) {
        if(bits.length==0) return false;
        if(bits.length==1) return true;
        int count=0;
        for(int i=bits.length-2;i>=0;i--){
            if(bits[i]==1){
                count++;
            }
            else{
                break;
            }
        }
        
        return count%2==0;
    }
}
