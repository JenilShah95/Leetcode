"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Given a non-empty array containing only positive integers, 
find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Note:
Each of the array element will not exceed 100.
The array size will not exceed 200.
Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: [1, 2, 3, 5]

Output: false

Explanation: The array cannot be partitioned into equal sum subsets.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


class Solution {
    public boolean canPartition(int[] nums) {
        int total=0;
        for(int i : nums){
            total+=i;
        }
        if(total%2 != 0) return false;
        Arrays.sort(nums);
        if(nums[nums.length-1] > total/2) return false;
        total=total/2;
        return partition(nums,total,nums.length-1);
    }
    public boolean partition(int[] nums, int total, int length){
        if(total==0) return true;
        for(int i=length;i>=0;i--){
            if(total - nums[i] >=0  && partition(nums,total-nums[i],i-1)){
                return true;
            }
        }
        return false;
    }
}
