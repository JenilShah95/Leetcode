"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considerred overlapping.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""/**
 
 
 
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        LinkedList<Interval> result = new LinkedList<Interval>();
        
        if(intervals.size()==0){
            return result;
        }        
        PriorityQueue<Interval> pq = new PriorityQueue<>(new Comparator<Interval>(){
            public int compare(Interval i1, Interval i2){
                return i1.start - i2.start;
            } 
        });
        
        for(Interval i : intervals ){
            pq.add(i);
        }
        result.add(pq.poll());
        
        while(pq.size() != 0){
            Interval s = pq.poll();
            if(intersect(result.peekLast(),s)){
                Interval merged = merge(result.pollLast(),s);
                result.add(merged);
            }
            else{
                result.add(s);
            }
        }
        return result;
    }
    public boolean intersect(Interval i1, Interval i2){
        if(i1.start <= i2.end && i1.end >= i2.start){
            return true;
        }
        return false;
    }
    public Interval merge(Interval i1, Interval i2){
        int start = Math.min(i1.start,i2.start);
        int end = Math.max(i1.end,i2.end);
        return new Interval(start,end);
    } 
}
