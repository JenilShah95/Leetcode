"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> l1 = new ArrayList<>();
        if(root == null){
            return l1;
        }
        // l1.add(root.val);
        l1 = binaryTreePaths(root,String.valueOf(root.val),l1);
        return l1;
    }
    public List<String> binaryTreePaths(TreeNode root,String add, List<String> l1){
        
        if(root.left==null && root.right == null){
            l1.add(add);
            return l1;
        }
        if(root.left!=null){
            binaryTreePaths(root.left,add+"->"+String.valueOf(root.left.val),l1);
        }
        if(root.right!=null){
            binaryTreePaths(root.right,add+"->"+String.valueOf(root.right.val),l1);            
        }
        return l1;
    }
}
