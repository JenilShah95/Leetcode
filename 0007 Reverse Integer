"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: 
[−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


class Solution {
    public int reverse(int x) {
        try{
            int number;
            if(x < 0 ){
                number=x-2*x;
            }
            else{
                number = x;
            }
            int remainder;

            String reverse="";
            while(number != 0){
                remainder =  number % 10;
                reverse+=remainder;
                number=number/10;
            }

            if(x==0){
                return 0;
            }

            return x>0 ? Integer.parseInt(reverse) : Integer.parseInt("-"+reverse);

            }
        catch(Exception e){
            return 0;
        }
    }
}

