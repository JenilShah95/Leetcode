"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

Your algorithm should run in O(n) complexity.

Example:

Input: [100, 4, 200, 1, 3, 2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


// class Solution {
//     public int longestConsecutive(int[] nums) {
//         int res=0;
//         HashMap<Integer,Integer> map = new HashMap<>();
//         for(int i=0;i<nums.length;i++){
//             if(map.containsKey(nums[i])){
//                 continue;
//             }
//             else{
//                 int lower = map.containsKey(nums[i]-1) ? map.get(nums[i]-1) : 0;
//                 int upper = map.containsKey(nums[i]+1) ? map.get(nums[i]+1) : 0;
                
//                 int sum=1+upper+lower;
                
//                 map.put(nums[i],sum);
                
//                 res = Math.max(res,sum);
                
//                 map.put(nums[i]-lower,sum);
//                 map.put(nums[i]+upper,sum);
//             }
//         }
//         return res;
//     }
// }


class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length<=1) return nums.length;
        int count=1;
        int ret=1;
        Arrays.sort(nums);
        for(int i=1;i<nums.length;i++){
            if(nums[i-1] ==nums[i] - 1){
                count++;
                ret=Math.max(ret,count);
            }
            else if(nums[i-1] < nums[i] - 1){
                count=1;
            }
        }
        return ret;
    }
}
