"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null && l2==null){
            return l1;
        }
        if(l1==null){
            return l2;
        }
        if(l2==null){
            return l1;
        }
        int len1=length(l1);
        int len2=length(l2);
        int diff = Math.abs(len1-len2);
        ListNode shorter = len1 < len2 ? l1:l2;
        ListNode longer = len1 < len2 ? l2:l1;
        int s=0;
        ListNode curr=shorter;
        while(s<diff){
            ListNode x = new ListNode(0);
            x.next = curr;
            curr=x;
            s++;
        }
        ListNode longrev = reverse(longer);
        ListNode shortrev = reverse(curr);
        int carry = 0;
        ListNode shortnode=new ListNode(0);
        ListNode current = shortnode;
        while(longrev!=null && shortrev!=null ){
            int value = carry+ longrev.val + shortrev.val;
            current.next = new ListNode(value%10);
            current = current.next;
            carry = value/10;
            longrev = longrev.next;
            shortrev = shortrev.next;
        }
        if(carry==1){
            current.next = new ListNode(1);
        }
        return reverse(shortnode.next);
    
    }
    public int length(ListNode list){
        int count=0;
        ListNode head = list;
        while(head!=null){
            count+=1;
            head=head.next;
        }
        return count;
    }
    public ListNode reverse(ListNode list){
        ListNode prev=null;
        ListNode curr=list;
        while(curr!=null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
