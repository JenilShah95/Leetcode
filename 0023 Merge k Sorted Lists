""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode result = new ListNode(0);
        for(int i=0;i<lists.length;i++){
            result.next = mergeNode(result.next,lists[i]);
        }
        return result.next;
    }
    public ListNode mergeNode(ListNode m,ListNode n) {
        ListNode result = new ListNode(0);
        ListNode node = result;
        while(m!=null && n!= null){
            if(m.val <= n.val){
                node.next = m;
                node= node.next;
                m=m.next;
            }
            else{
                node.next = n;
                node= node.next;
                n=n.next;
            }
        }
        if(m==null){
            node.next=n;
        }
        if(n==null){
            node.next=m;
        }
        return result.next;
    }
}
