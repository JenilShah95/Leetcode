""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Example 1:

Input: pattern = "abba", str = "dog cat cat dog"
Output: true
Example 2:

Input:pattern = "abba", str = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", str = "dog cat cat dog"
Output: false
Example 4:

Input: pattern = "abba", str = "dog dog dog dog"
Output: false

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



class Solution {
    public boolean wordPattern(String pattern, String str) {
        
        if(pattern.length()!=str.split(" ").length){
            return false;
        }
        
        HashMap<Character,List<String>> map = new HashMap<>();
        ArrayList<String> list1 = new ArrayList<String>();
        for(int i=0;i<pattern.length();i++){
            
            char ch = pattern.charAt(i);
            String val = new String(str.split(" ")[i]);
            if(!map.containsKey(ch)){
                ArrayList<String> list = new ArrayList<>();
                list.add(val);
                if(list1.contains(val)){
                    return false;
                }
                list1.add(val);
                map.put(ch,list);
            }
            else{
                
                if(map.get(ch).size() > 0){
                    if(!val.equals(map.get(ch).get(0))){
                        return false;
                    }
                }
                map.get(ch).add(val);
            }
                
        }
        
        return true;
    }
}
