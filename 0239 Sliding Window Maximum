"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right.
You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length == 0) return nums;
        ArrayList<Integer> result = new ArrayList<>();
        for(int i=0;i<nums.length-k+1;i++){
            maxwindow(nums,i,i+k,result);
        }
        int[] r = new int[result.size()];
        int j=0;
        for(int i : result){
            r[j] = i;
            j++;
        }
        return r;
    }
    public void maxwindow(int[] nums, int i, int k, List<Integer> list){
        int max = Integer.MIN_VALUE;
        while(i < k){
            if(nums[i] > max){
                max=nums[i];
            }
            i++;
        }
        list.add(max); 
    }
}
