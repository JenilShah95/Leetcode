"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Given a string s, you are allowed to convert it to a palindrome by adding characters in front of it.
Find and return the shortest palindrome you can find by performing this transformation.

Example 1:

Input: "aacecaaa"
Output: "aaacecaaa"
Example 2:

Input: "abcd"
Output: "dcbabcd"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


class Solution {
    public String shortestPalindrome(String s) {
        char[] chars = s.toCharArray();
        int start = 0;
        int end = chars.length-1;
        for(;end>=0;end--){
            if(ispalindrome(chars,start,end)){
                break;
            }
        }
        
        StringBuilder sb = new StringBuilder();
        for(int i=chars.length-1;i>end;i--){
            sb.append(String.valueOf(chars[i]));
        }
        sb.append(String.valueOf(chars));
        return sb.toString();
    }
    public boolean ispalindrome(char[] chars, int start, int end){
        while(start<end){
            if(chars[start]!=chars[end]){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
