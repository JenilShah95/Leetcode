"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


class Solution {
    public int numTrees(int n) {
        if(n<=2){
            return n;
        }
        int[] trees = new int[n+1];
        trees[0]=1;
        trees[1]=1;
        // trees[2]=2;
        for(int i=2; i<=n; i++){
            for(int j=1;j<=i;j++){
                trees[i]+=trees[i-j] * trees[j-1]; 
            }    
        }
        return trees[n];
    }
}
